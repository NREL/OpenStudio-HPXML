<?xml version='1.0' encoding='UTF-8'?>
<sch:schema xmlns:sch='http://purl.oclc.org/dsdl/schematron'>
  <sch:title>HPXML Schematron Validator: HPXML.xsd</sch:title>
  <sch:ns uri='http://hpxmlonline.com/2019/10' prefix='h'/>
  <sch:pattern>
    <sch:rule context='/h:HPXML/h:XMLTransactionHeaderInformation'>
      <sch:assert role='ERROR' test='not(h:Transaction) or contains("_create_ _update_", concat("_", h:Transaction, "_"))'>Expected Transaction to be 'create' or 'update'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:ProjectStatus'>
      <sch:assert role='ERROR' test='not(h:EventType) or contains("_audit_ _proposed workscope_ _approved workscope_ _construction-period testing/daily test out_ _job completion testing/final inspection_ _quality assurance/monitoring_ _preconstruction_", concat("_", h:EventType, "_"))'>Expected EventType to be 'audit' or 'proposed workscope' or 'approved workscope' or 'construction-period testing/daily test out' or 'job completion testing/final inspection' or 'quality assurance/monitoring' or 'preconstruction'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:Site'>
      <sch:assert role='ERROR' test='not(h:SiteType) or contains("_rural_ _suburban_ _urban_", concat("_", h:SiteType, "_"))'>Expected SiteType to be 'rural' or 'suburban' or 'urban'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:Site/h:FuelTypesAvailable'>
      <sch:assert role='ERROR' test='not(h:Fuel) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:Fuel, "_"))'>Expected Fuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:BuildingOccupancy'>
      <sch:assert role='ERROR' test='not(h:NumberofResidents) or number(h:NumberofResidents) &gt;= 0'>Expected NumberofResidents to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:BuildingConstruction'>
      <sch:assert role='ERROR' test='not(h:ResidentialFacilityType) or contains("_single-family detached_ _single-family attached_ _manufactured home_ _2-4 unit building_ _5+ unit building_ _multi-family - uncategorized_ _multi-family - town homes_ _multi-family - condos_ _apartment unit_ _studio unit_ _other_ _unknown_", concat("_", h:ResidentialFacilityType, "_"))'>Expected ResidentialFacilityType to be 'single-family detached' or 'single-family attached' or 'manufactured home' or '2-4 unit building' or '5+ unit building' or 'multi-family - uncategorized' or 'multi-family - town homes' or 'multi-family - condos' or 'apartment unit' or 'studio unit' or 'other' or 'unknown'</sch:assert>
      <sch:assert role='ERROR' test='not(h:NumberofConditionedFloors) or number(h:NumberofConditionedFloors) &gt;= 0'>Expected NumberofConditionedFloors to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:NumberofConditionedFloorsAboveGrade) or number(h:NumberofConditionedFloorsAboveGrade) &gt;= 0'>Expected NumberofConditionedFloorsAboveGrade to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:AverageCeilingHeight) or number(h:AverageCeilingHeight) &gt;= 0'>Expected AverageCeilingHeight to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:NumberofBedrooms) or number(h:NumberofBedrooms) &gt;= 0'>Expected NumberofBedrooms to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:NumberofBathrooms) or number(h:NumberofBathrooms) &gt; 0'>Expected NumberofBathrooms to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:ConditionedFloorArea) or number(h:ConditionedFloorArea) &gt; 0'>Expected ConditionedFloorArea to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:ConditionedBuildingVolume) or number(h:ConditionedBuildingVolume) &gt; 0'>Expected ConditionedBuildingVolume to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:ClimateandRiskZones/h:ClimateZoneIECC'>
      <sch:assert role='ERROR' test='not(h:Year) or contains("_2012_ _2009_ _2006_ _2003_", concat("_", h:Year, "_"))'>Expected Year to be '2012' or '2009' or '2006' or '2003'</sch:assert>
      <sch:assert role='ERROR' test='not(h:ClimateZone) or contains("_1A_ _1B_ _1C_ _2A_ _2B_ _2C_ _3A_ _3B_ _3C_ _4A_ _4B_ _4C_ _5A_ _5B_ _5C_ _6A_ _6B_ _6C_ _7_ _8_", concat("_", h:ClimateZone, "_"))'>Expected ClimateZone to be '1A' or '1B' or '1C' or '2A' or '2B' or '2C' or '3A' or '3B' or '3C' or '4A' or '4B' or '4C' or '5A' or '5B' or '5C' or '6A' or '6B' or '6C' or '7' or '8'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:AirInfiltration/h:AirInfiltrationMeasurement'>
      <sch:assert role='ERROR' test='not(h:HousePressure) or number(h:HousePressure) &gt; 0'>Expected HousePressure to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:AirInfiltration/h:AirInfiltrationMeasurement/h:BuildingAirLeakage'>
      <sch:assert role='ERROR' test='not(h:UnitofMeasure) or contains("_CFM_ _CFMnatural_ _ACH_ _ACHnatural_", concat("_", h:UnitofMeasure, "_"))'>Expected UnitofMeasure to be 'CFM' or 'CFMnatural' or 'ACH' or 'ACHnatural'</sch:assert>
      <sch:assert role='ERROR' test='not(h:AirLeakage) or number(h:AirLeakage) &gt; 0'>Expected AirLeakage to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Attics/h:Attic/h:VentilationRate'>
      <sch:assert role='ERROR' test='not(h:UnitofMeasure) or contains("_SLA_ _ACHnatural_ _CFM per sq.ft._", concat("_", h:UnitofMeasure, "_"))'>Expected UnitofMeasure to be 'SLA' or 'ACHnatural' or 'CFM per sq.ft.'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt; 0'>Expected Value to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Foundations/h:Foundation/h:VentilationRate'>
      <sch:assert role='ERROR' test='not(h:UnitofMeasure) or contains("_SLA_ _ACHnatural_ _CFM per sq.ft._", concat("_", h:UnitofMeasure, "_"))'>Expected UnitofMeasure to be 'SLA' or 'ACHnatural' or 'CFM per sq.ft.'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt; 0'>Expected Value to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Roofs/h:Roof'>
      <sch:assert role='ERROR' test='not(h:InteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:InteriorAdjacentTo, "_"))'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:RoofType) or contains("_shingles_ _slate or tile shingles_ _wood shingles or shakes_ _asphalt or fiberglass shingles_ _metal surfacing_ _expanded polystyrene sheathing_ _plastic/rubber/synthetic sheeting_ _concrete_ _cool roof_ _green roof_ _no one major type_ _other_", concat("_", h:RoofType, "_"))'>Expected RoofType to be 'shingles' or 'slate or tile shingles' or 'wood shingles or shakes' or 'asphalt or fiberglass shingles' or 'metal surfacing' or 'expanded polystyrene sheathing' or 'plastic/rubber/synthetic sheeting' or 'concrete' or 'cool roof' or 'green roof' or 'no one major type' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:RoofColor) or contains("_light_ _medium_ _medium dark_ _dark_ _reflective_", concat("_", h:RoofColor, "_"))'>Expected RoofColor to be 'light' or 'medium' or 'medium dark' or 'dark' or 'reflective'</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarAbsorptance) or number(h:SolarAbsorptance) &gt;= 0'>Expected SolarAbsorptance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarAbsorptance) or number(h:SolarAbsorptance) &lt;= 1'>Expected SolarAbsorptance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:Emittance) or number(h:Emittance) &gt;= 0'>Expected Emittance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Emittance) or number(h:Emittance) &lt;= 1'>Expected Emittance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:Pitch) or number(h:Pitch) &gt;= 0'>Expected Pitch to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:RadiantBarrierGrade) or number(h:RadiantBarrierGrade) &gt;= 1'>Expected RadiantBarrierGrade to be greater than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:RadiantBarrierGrade) or number(h:RadiantBarrierGrade) &lt;= 3'>Expected RadiantBarrierGrade to be less than or equal to 3</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Roofs/h:Roof/h:Insulation'>
      <sch:assert role='ERROR' test='not(h:AssemblyEffectiveRValue) or number(h:AssemblyEffectiveRValue) &gt;= 0'>Expected AssemblyEffectiveRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:RimJoists/h:RimJoist'>
      <sch:assert role='ERROR' test='not(h:ExteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:ExteriorAdjacentTo, "_"))'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:InteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:InteriorAdjacentTo, "_"))'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:Siding) or contains("_wood siding_ _stucco_ _synthetic stucco_ _vinyl siding_ _aluminum siding_ _brick veneer_ _asbestos siding_ _fiber cement siding_ _composite shingle siding_ _masonite siding_ _other_", concat("_", h:Siding, "_"))'>Expected Siding to be 'wood siding' or 'stucco' or 'synthetic stucco' or 'vinyl siding' or 'aluminum siding' or 'brick veneer' or 'asbestos siding' or 'fiber cement siding' or 'composite shingle siding' or 'masonite siding' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Color) or contains("_light_ _medium_ _medium dark_ _dark_ _reflective_", concat("_", h:Color, "_"))'>Expected Color to be 'light' or 'medium' or 'medium dark' or 'dark' or 'reflective'</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarAbsorptance) or number(h:SolarAbsorptance) &gt;= 0'>Expected SolarAbsorptance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarAbsorptance) or number(h:SolarAbsorptance) &lt;= 1'>Expected SolarAbsorptance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:Emittance) or number(h:Emittance) &gt;= 0'>Expected Emittance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Emittance) or number(h:Emittance) &lt;= 1'>Expected Emittance to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:RimJoists/h:RimJoist/h:Insulation'>
      <sch:assert role='ERROR' test='not(h:AssemblyEffectiveRValue) or number(h:AssemblyEffectiveRValue) &gt;= 0'>Expected AssemblyEffectiveRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Walls/h:Wall'>
      <sch:assert role='ERROR' test='not(h:ExteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:ExteriorAdjacentTo, "_"))'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:InteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:InteriorAdjacentTo, "_"))'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:Siding) or contains("_wood siding_ _stucco_ _synthetic stucco_ _vinyl siding_ _aluminum siding_ _brick veneer_ _asbestos siding_ _fiber cement siding_ _composite shingle siding_ _masonite siding_ _other_", concat("_", h:Siding, "_"))'>Expected Siding to be 'wood siding' or 'stucco' or 'synthetic stucco' or 'vinyl siding' or 'aluminum siding' or 'brick veneer' or 'asbestos siding' or 'fiber cement siding' or 'composite shingle siding' or 'masonite siding' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Color) or contains("_light_ _medium_ _medium dark_ _dark_ _reflective_", concat("_", h:Color, "_"))'>Expected Color to be 'light' or 'medium' or 'medium dark' or 'dark' or 'reflective'</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarAbsorptance) or number(h:SolarAbsorptance) &gt;= 0'>Expected SolarAbsorptance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarAbsorptance) or number(h:SolarAbsorptance) &lt;= 1'>Expected SolarAbsorptance to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:Emittance) or number(h:Emittance) &gt;= 0'>Expected Emittance to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Emittance) or number(h:Emittance) &lt;= 1'>Expected Emittance to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Walls/h:Wall/h:Insulation'>
      <sch:assert role='ERROR' test='not(h:AssemblyEffectiveRValue) or number(h:AssemblyEffectiveRValue) &gt;= 0'>Expected AssemblyEffectiveRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FoundationWalls/h:FoundationWall'>
      <sch:assert role='ERROR' test='not(h:ExteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:ExteriorAdjacentTo, "_"))'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:InteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:InteriorAdjacentTo, "_"))'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Height) or number(h:Height) &gt;= 0'>Expected Height to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:Thickness) or number(h:Thickness) &gt;= 0'>Expected Thickness to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DepthBelowGrade) or number(h:DepthBelowGrade) &gt;= 0'>Expected DepthBelowGrade to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Insulation'>
      <sch:assert role='ERROR' test='not(h:AssemblyEffectiveRValue) or number(h:AssemblyEffectiveRValue) &gt;= 0'>Expected AssemblyEffectiveRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Insulation/h:Layer'>
      <sch:assert role='ERROR' test='not(h:InstallationType) or contains("_cavity_ _continuous_ _continuous - interior_ _continuous - exterior_", concat("_", h:InstallationType, "_"))'>Expected InstallationType to be 'cavity' or 'continuous' or 'continuous - interior' or 'continuous - exterior'</sch:assert>
      <sch:assert role='ERROR' test='not(h:NominalRValue) or number(h:NominalRValue) &gt;= 0'>Expected NominalRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FrameFloors/h:FrameFloor'>
      <sch:assert role='ERROR' test='not(h:ExteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:ExteriorAdjacentTo, "_"))'>Expected ExteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:InteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:InteriorAdjacentTo, "_"))'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FrameFloors/h:FrameFloor/h:Insulation'>
      <sch:assert role='ERROR' test='not(h:AssemblyEffectiveRValue) or number(h:AssemblyEffectiveRValue) &gt;= 0'>Expected AssemblyEffectiveRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Slabs/h:Slab'>
      <sch:assert role='ERROR' test='not(h:InteriorAdjacentTo) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_", concat("_", h:InteriorAdjacentTo, "_"))'>Expected InteriorAdjacentTo to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'ground' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other housing unit above' or 'other housing unit below' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Thickness) or number(h:Thickness) &gt;= 0'>Expected Thickness to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Perimeter) or number(h:Perimeter) &gt;= 0'>Expected Perimeter to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:ExposedPerimeter) or number(h:ExposedPerimeter) &gt;= 0'>Expected ExposedPerimeter to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:PerimeterInsulationDepth) or number(h:PerimeterInsulationDepth) &gt;= 0'>Expected PerimeterInsulationDepth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:UnderSlabInsulationWidth) or number(h:UnderSlabInsulationWidth) &gt;= 0'>Expected UnderSlabInsulationWidth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DepthBelowGrade) or number(h:DepthBelowGrade) &gt;= 0'>Expected DepthBelowGrade to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Slabs/h:Slab/h:PerimeterInsulation/h:Layer'>
      <sch:assert role='ERROR' test='not(h:InstallationType) or contains("_cavity_ _continuous_ _continuous - interior_ _continuous - exterior_", concat("_", h:InstallationType, "_"))'>Expected InstallationType to be 'cavity' or 'continuous' or 'continuous - interior' or 'continuous - exterior'</sch:assert>
      <sch:assert role='ERROR' test='not(h:NominalRValue) or number(h:NominalRValue) &gt;= 0'>Expected NominalRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Slabs/h:Slab/h:UnderSlabInsulation/h:Layer'>
      <sch:assert role='ERROR' test='not(h:InstallationType) or contains("_cavity_ _continuous_ _continuous - interior_ _continuous - exterior_", concat("_", h:InstallationType, "_"))'>Expected InstallationType to be 'cavity' or 'continuous' or 'continuous - interior' or 'continuous - exterior'</sch:assert>
      <sch:assert role='ERROR' test='not(h:NominalRValue) or number(h:NominalRValue) &gt;= 0'>Expected NominalRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Windows/h:Window'>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:UFactor) or number(h:UFactor) &gt; 0'>Expected UFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SHGC) or number(h:SHGC) &gt; 0'>Expected SHGC to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SHGC) or number(h:SHGC) &lt; 1'>Expected SHGC to be less than 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionOperable) or number(h:FractionOperable) &gt;= 0'>Expected FractionOperable to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionOperable) or number(h:FractionOperable) &lt;= 1'>Expected FractionOperable to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Windows/h:Window/h:InteriorShading'>
      <sch:assert role='ERROR' test='not(h:SummerShadingCoefficient) or number(h:SummerShadingCoefficient) &gt;= 0'>Expected SummerShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SummerShadingCoefficient) or number(h:SummerShadingCoefficient) &lt;= 1'>Expected SummerShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:WinterShadingCoefficient) or number(h:WinterShadingCoefficient) &gt;= 0'>Expected WinterShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:WinterShadingCoefficient) or number(h:WinterShadingCoefficient) &lt;= 1'>Expected WinterShadingCoefficient to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Windows/h:Window/h:Overhangs'>
      <sch:assert role='ERROR' test='not(h:Depth) or number(h:Depth) &gt;= 0'>Expected Depth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DistanceToTopOfWindow) or number(h:DistanceToTopOfWindow) &gt;= 0'>Expected DistanceToTopOfWindow to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DistanceToBottomOfWindow) or number(h:DistanceToBottomOfWindow) &gt;= 0'>Expected DistanceToBottomOfWindow to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Skylights/h:Skylight'>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:UFactor) or number(h:UFactor) &gt; 0'>Expected UFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SHGC) or number(h:SHGC) &gt; 0'>Expected SHGC to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SHGC) or number(h:SHGC) &lt; 1'>Expected SHGC to be less than 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Skylights/h:Skylight/h:InteriorShading'>
      <sch:assert role='ERROR' test='not(h:SummerShadingCoefficient) or number(h:SummerShadingCoefficient) &gt;= 0'>Expected SummerShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SummerShadingCoefficient) or number(h:SummerShadingCoefficient) &lt;= 1'>Expected SummerShadingCoefficient to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:WinterShadingCoefficient) or number(h:WinterShadingCoefficient) &gt;= 0'>Expected WinterShadingCoefficient to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:WinterShadingCoefficient) or number(h:WinterShadingCoefficient) &lt;= 1'>Expected WinterShadingCoefficient to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Doors/h:Door'>
      <sch:assert role='ERROR' test='not(h:Area) or number(h:Area) &gt; 0'>Expected Area to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &gt;= 0'>Expected Azimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Azimuth) or number(h:Azimuth) &lt; 360'>Expected Azimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:RValue) or number(h:RValue) &gt;= 0'>Expected RValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem'>
      <sch:assert role='ERROR' test='not(h:HeatingSystemFuel) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:HeatingSystemFuel, "_"))'>Expected HeatingSystemFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionHeatLoadServed) or number(h:FractionHeatLoadServed) &gt;= 0'>Expected FractionHeatLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionHeatLoadServed) or number(h:FractionHeatLoadServed) &lt;= 1'>Expected FractionHeatLoadServed to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem/h:AnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_HSPF_ _COP_ _AFUE_ _Percent_", concat("_", h:Units, "_"))'>Expected Units to be 'HSPF' or 'COP' or 'AFUE' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt;= 0'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem'>
      <sch:assert role='ERROR' test='not(h:CoolingSystemType) or contains("_central air conditioner_ _mini-split_ _room air conditioner_ _evaporative cooler_ _chiller_ _cooling tower_ _other_", concat("_", h:CoolingSystemType, "_"))'>Expected CoolingSystemType to be 'central air conditioner' or 'mini-split' or 'room air conditioner' or 'evaporative cooler' or 'chiller' or 'cooling tower' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CoolingSystemFuel) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:CoolingSystemFuel, "_"))'>Expected CoolingSystemFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CompressorType) or contains("_single stage_ _two stage_ _variable speed_", concat("_", h:CompressorType, "_"))'>Expected CompressorType to be 'single stage' or 'two stage' or 'variable speed'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionCoolLoadServed) or number(h:FractionCoolLoadServed) &gt;= 0'>Expected FractionCoolLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionCoolLoadServed) or number(h:FractionCoolLoadServed) &lt;= 1'>Expected FractionCoolLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:SensibleHeatFraction) or number(h:SensibleHeatFraction) &gt;= 0'>Expected SensibleHeatFraction to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SensibleHeatFraction) or number(h:SensibleHeatFraction) &lt;= 1'>Expected SensibleHeatFraction to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem/h:AnnualCoolingEfficiency'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_SEER_ _EER_ _COP_ _kW/ton_", concat("_", h:Units, "_"))'>Expected Units to be 'SEER' or 'EER' or 'COP' or 'kW/ton'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt;= 0'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump'>
      <sch:assert role='ERROR' test='not(h:HeatPumpType) or contains("_water-to-air_ _water-to-water_ _air-to-air_ _air-to-water_ _mini-split_ _ground-to-air_ _ground-to-water_ _water-loop-to-air_ _variable refrigerant flow_", concat("_", h:HeatPumpType, "_"))'>Expected HeatPumpType to be 'water-to-air' or 'water-to-water' or 'air-to-air' or 'air-to-water' or 'mini-split' or 'ground-to-air' or 'ground-to-water' or 'water-loop-to-air' or 'variable refrigerant flow'</sch:assert>
      <sch:assert role='ERROR' test='not(h:HeatPumpFuel) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:HeatPumpFuel, "_"))'>Expected HeatPumpFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CompressorType) or contains("_single stage_ _two stage_ _variable speed_", concat("_", h:CompressorType, "_"))'>Expected CompressorType to be 'single stage' or 'two stage' or 'variable speed'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CoolingSensibleHeatFraction) or number(h:CoolingSensibleHeatFraction) &gt;= 0'>Expected CoolingSensibleHeatFraction to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:CoolingSensibleHeatFraction) or number(h:CoolingSensibleHeatFraction) &lt;= 1'>Expected CoolingSensibleHeatFraction to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:BackupSystemFuel) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:BackupSystemFuel, "_"))'>Expected BackupSystemFuel to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionHeatLoadServed) or number(h:FractionHeatLoadServed) &gt;= 0'>Expected FractionHeatLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionHeatLoadServed) or number(h:FractionHeatLoadServed) &lt;= 1'>Expected FractionHeatLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionCoolLoadServed) or number(h:FractionCoolLoadServed) &gt;= 0'>Expected FractionCoolLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionCoolLoadServed) or number(h:FractionCoolLoadServed) &lt;= 1'>Expected FractionCoolLoadServed to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump/h:BackupAnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_HSPF_ _COP_ _AFUE_ _Percent_", concat("_", h:Units, "_"))'>Expected Units to be 'HSPF' or 'COP' or 'AFUE' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt;= 0'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump/h:AnnualCoolingEfficiency'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_SEER_ _EER_ _COP_ _kW/ton_", concat("_", h:Units, "_"))'>Expected Units to be 'SEER' or 'EER' or 'COP' or 'kW/ton'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt;= 0'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump/h:AnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_HSPF_ _COP_ _AFUE_ _Percent_", concat("_", h:Units, "_"))'>Expected Units to be 'HSPF' or 'COP' or 'AFUE' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Value) or number(h:Value) &gt;= 0'>Expected Value to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACControl'>
      <sch:assert role='ERROR' test='not(h:ControlType) or contains("_programmable thermostat_ _manual thermostat_ _digital thermostat_ _timer_ _EMCS_ _other_", concat("_", h:ControlType, "_"))'>Expected ControlType to be 'programmable thermostat' or 'manual thermostat' or 'digital thermostat' or 'timer' or 'EMCS' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution/h:DuctLeakageMeasurement'>
      <sch:assert role='ERROR' test='not(h:DuctType) or contains("_supply_ _return_", concat("_", h:DuctType, "_"))'>Expected DuctType to be 'supply' or 'return'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution/h:DuctLeakageMeasurement/h:DuctLeakage'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_CFM50_ _CFM25_ _CFM per Std 152_ _Percent_", concat("_", h:Units, "_"))'>Expected Units to be 'CFM50' or 'CFM25' or 'CFM per Std 152' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='not(h:TotalOrToOutside) or contains("_to outside_ _total_", concat("_", h:TotalOrToOutside, "_"))'>Expected TotalOrToOutside to be 'to outside' or 'total'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution/h:Ducts'>
      <sch:assert role='ERROR' test='not(h:DuctType) or contains("_supply_ _return_", concat("_", h:DuctType, "_"))'>Expected DuctType to be 'supply' or 'return'</sch:assert>
      <sch:assert role='ERROR' test='not(h:DuctInsulationRValue) or number(h:DuctInsulationRValue) &gt;= 0'>Expected DuctInsulationRValue to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DuctLocation) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _exterior wall_ _garage_ _garage - conditioned_ _garage - unconditioned_ _interstitial space_ _living space_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _roof deck_ _unconditioned space_ _under slab_", concat("_", h:DuctLocation, "_"))'>Expected DuctLocation to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'exterior wall' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'interstitial space' or 'living space' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'roof deck' or 'unconditioned space' or 'under slab'</sch:assert>
      <sch:assert role='ERROR' test='not(h:DuctSurfaceArea) or number(h:DuctSurfaceArea) &gt; 0'>Expected DuctSurfaceArea to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution'>
      <sch:assert role='ERROR' test='not(h:NumberofReturnRegisters) or number(h:NumberofReturnRegisters) &gt;= 0'>Expected NumberofReturnRegisters to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicDistribution'>
      <sch:assert role='ERROR' test='not(h:HydronicDistributionType) or contains("_radiator_ _baseboard_ _radiant floor_ _radiant ceiling_ _other_", concat("_", h:HydronicDistributionType, "_"))'>Expected HydronicDistributionType to be 'radiator' or 'baseboard' or 'radiant floor' or 'radiant ceiling' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicAndAirDistribution'>
      <sch:assert role='ERROR' test='not(h:HydronicAndAirDistributionType) or contains("_fan coil_ _water loop heat pump_ _other_", concat("_", h:HydronicAndAirDistributionType, "_"))'>Expected HydronicAndAirDistributionType to be 'fan coil' or 'water loop heat pump' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:NumberofReturnRegisters) or number(h:NumberofReturnRegisters) &gt;= 0'>Expected NumberofReturnRegisters to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicAndAirDistribution/h:DuctLeakageMeasurement'>
      <sch:assert role='ERROR' test='not(h:DuctType) or contains("_supply_ _return_", concat("_", h:DuctType, "_"))'>Expected DuctType to be 'supply' or 'return'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicAndAirDistribution/h:DuctLeakageMeasurement/h:DuctLeakage'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_CFM50_ _CFM25_ _CFM per Std 152_ _Percent_", concat("_", h:Units, "_"))'>Expected Units to be 'CFM50' or 'CFM25' or 'CFM per Std 152' or 'Percent'</sch:assert>
      <sch:assert role='ERROR' test='not(h:TotalOrToOutside) or contains("_to outside_ _total_", concat("_", h:TotalOrToOutside, "_"))'>Expected TotalOrToOutside to be 'to outside' or 'total'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicAndAirDistribution/h:Ducts'>
      <sch:assert role='ERROR' test='not(h:DuctType) or contains("_supply_ _return_", concat("_", h:DuctType, "_"))'>Expected DuctType to be 'supply' or 'return'</sch:assert>
      <sch:assert role='ERROR' test='not(h:DuctInsulationRValue) or number(h:DuctInsulationRValue) &gt;= 0'>Expected DuctInsulationRValue to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DuctLocation) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _exterior wall_ _garage_ _garage - conditioned_ _garage - unconditioned_ _interstitial space_ _living space_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _roof deck_ _unconditioned space_ _under slab_", concat("_", h:DuctLocation, "_"))'>Expected DuctLocation to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'exterior wall' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'interstitial space' or 'living space' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'outside' or 'roof deck' or 'unconditioned space' or 'under slab'</sch:assert>
      <sch:assert role='ERROR' test='not(h:DuctSurfaceArea) or number(h:DuctSurfaceArea) &gt; 0'>Expected DuctSurfaceArea to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution'>
      <sch:assert role='ERROR' test='not(h:ConditionedFloorAreaServed) or number(h:ConditionedFloorAreaServed) &gt; 0'>Expected ConditionedFloorAreaServed to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan'>
      <sch:assert role='ERROR' test='not(h:Quantity) or number(h:Quantity) &gt; 0'>Expected Quantity to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FanType) or contains("_exhaust only_ _supply only_ _heat recovery ventilator_ _energy recovery ventilator_ _balanced_ _central fan integrated supply_", concat("_", h:FanType, "_"))'>Expected FanType to be 'exhaust only' or 'supply only' or 'heat recovery ventilator' or 'energy recovery ventilator' or 'balanced' or 'central fan integrated supply'</sch:assert>
      <sch:assert role='ERROR' test='not(h:HoursInOperation) or number(h:HoursInOperation) &gt;= 0'>Expected HoursInOperation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:HoursInOperation) or number(h:HoursInOperation) &lt;= 24'>Expected HoursInOperation to be less than or equal to 24</sch:assert>
      <sch:assert role='ERROR' test='not(h:FanLocation) or contains("_bath_ _garage_ _garage - conditioned_ _garage - unconditioned_ _hallway_ _kitchen_ _other_", concat("_", h:FanLocation, "_"))'>Expected FanLocation to be 'bath' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'hallway' or 'kitchen' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionRecirculation) or number(h:FractionRecirculation) &gt;= 0'>Expected FractionRecirculation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionRecirculation) or number(h:FractionRecirculation) &lt;= 1'>Expected FractionRecirculation to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:TotalRecoveryEfficiency) or number(h:TotalRecoveryEfficiency) &gt;= 0'>Expected TotalRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:TotalRecoveryEfficiency) or number(h:TotalRecoveryEfficiency) &lt;= 1'>Expected TotalRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:SensibleRecoveryEfficiency) or number(h:SensibleRecoveryEfficiency) &gt;= 0'>Expected SensibleRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SensibleRecoveryEfficiency) or number(h:SensibleRecoveryEfficiency) &lt;= 1'>Expected SensibleRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:AdjustedTotalRecoveryEfficiency) or number(h:AdjustedTotalRecoveryEfficiency) &gt;= 0'>Expected AdjustedTotalRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:AdjustedTotalRecoveryEfficiency) or number(h:AdjustedTotalRecoveryEfficiency) &lt;= 1'>Expected AdjustedTotalRecoveryEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:AdjustedSensibleRecoveryEfficiency) or number(h:AdjustedSensibleRecoveryEfficiency) &gt;= 0'>Expected AdjustedSensibleRecoveryEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:AdjustedSensibleRecoveryEfficiency) or number(h:AdjustedSensibleRecoveryEfficiency) &lt;= 1'>Expected AdjustedSensibleRecoveryEfficiency to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:WaterHeatingSystem'>
      <sch:assert role='ERROR' test='not(h:FuelType) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:FuelType, "_"))'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:WaterHeaterType) or contains("_storage water heater_ _dedicated boiler with storage tank_ _instantaneous water heater_ _heat pump water heater_ _space-heating boiler with storage tank_ _space-heating boiler with tankless coil_", concat("_", h:WaterHeaterType, "_"))'>Expected WaterHeaterType to be 'storage water heater' or 'dedicated boiler with storage tank' or 'instantaneous water heater' or 'heat pump water heater' or 'space-heating boiler with storage tank' or 'space-heating boiler with tankless coil'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _living space_ _mechanical closet_ _other exterior_ _other heated space_ _other housing unit_ _other interior_ _other multifamily buffer space_ _other non-freezing space_ _roof deck_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'attic' or 'attic - conditioned' or 'attic - unconditioned' or 'attic - unvented' or 'attic - vented' or 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'crawlspace' or 'crawlspace - conditioned' or 'crawlspace - unconditioned' or 'crawlspace - unvented' or 'crawlspace - vented' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'living space' or 'mechanical closet' or 'other exterior' or 'other heated space' or 'other housing unit' or 'other interior' or 'other multifamily buffer space' or 'other non-freezing space' or 'roof deck' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:PerformanceAdjustment) or number(h:PerformanceAdjustment) &gt;= 0'>Expected PerformanceAdjustment to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:PerformanceAdjustment) or number(h:PerformanceAdjustment) &lt;= 1'>Expected PerformanceAdjustment to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:TankVolume) or number(h:TankVolume) &gt; 0'>Expected TankVolume to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionDHWLoadServed) or number(h:FractionDHWLoadServed) &gt;= 0'>Expected FractionDHWLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionDHWLoadServed) or number(h:FractionDHWLoadServed) &lt;= 1'>Expected FractionDHWLoadServed to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:EnergyFactor) or number(h:EnergyFactor) &lt;= 5'>Expected EnergyFactor to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='not(h:EnergyFactor) or number(h:EnergyFactor) &gt; 0'>Expected EnergyFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:UniformEnergyFactor) or number(h:UniformEnergyFactor) &lt;= 5'>Expected UniformEnergyFactor to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='not(h:UniformEnergyFactor) or number(h:UniformEnergyFactor) &gt; 0'>Expected UniformEnergyFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:RecoveryEfficiency) or number(h:RecoveryEfficiency) &lt;= 5'>Expected RecoveryEfficiency to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='not(h:RecoveryEfficiency) or number(h:RecoveryEfficiency) &gt; 0'>Expected RecoveryEfficiency to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:Jacket'>
      <sch:assert role='ERROR' test='not(h:JacketRValue) or number(h:JacketRValue) &gt;= 0'>Expected JacketRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Standard'>
      <sch:assert role='ERROR' test='not(h:PipingLength) or number(h:PipingLength) &gt;= 0'>Expected PipingLength to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation'>
      <sch:assert role='ERROR' test='not(h:ControlType) or contains("_no control_ _timer_ _temperature_ _presence sensor demand control_ _manual demand control_", concat("_", h:ControlType, "_"))'>Expected ControlType to be 'no control' or 'timer' or 'temperature' or 'presence sensor demand control' or 'manual demand control'</sch:assert>
      <sch:assert role='ERROR' test='not(h:RecirculationPipingLoopLength) or number(h:RecirculationPipingLoopLength) &gt;= 0'>Expected RecirculationPipingLoopLength to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:BranchPipingLoopLength) or number(h:BranchPipingLoopLength) &gt;= 0'>Expected BranchPipingLoopLength to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:PumpPower) or number(h:PumpPower) &gt;= 0'>Expected PumpPower to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:HotWaterDistribution/h:PipeInsulation'>
      <sch:assert role='ERROR' test='not(h:PipeRValue) or number(h:PipeRValue) &gt;= 0'>Expected PipeRValue to be greater than or equal to 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:HotWaterDistribution/h:DrainWaterHeatRecovery'>
      <sch:assert role='ERROR' test='not(h:FacilitiesConnected) or contains("_one_ _all_", concat("_", h:FacilitiesConnected, "_"))'>Expected FacilitiesConnected to be 'one' or 'all'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Efficiency) or number(h:Efficiency) &gt;= 0'>Expected Efficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:Efficiency) or number(h:Efficiency) &lt;= 1'>Expected Efficiency to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:WaterHeating/h:WaterFixture'>
      <sch:assert role='ERROR' test='not(h:WaterFixtureType) or contains("_faucet_ _shower head_ _other_", concat("_", h:WaterFixtureType, "_"))'>Expected WaterFixtureType to be 'faucet' or 'shower head' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:SolarThermal/h:SolarThermalSystem'>
      <sch:assert role='ERROR' test='not(h:SystemType) or contains("_hot water_ _hot water and space heating_ _space heating_ _hybrid system_", concat("_", h:SystemType, "_"))'>Expected SystemType to be 'hot water' or 'hot water and space heating' or 'space heating' or 'hybrid system'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorArea) or number(h:CollectorArea) &gt; 0'>Expected CollectorArea to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorLoopType) or contains("_air direct_ _air indirect_ _liquid direct_ _liquid indirect_ _passive thermosyphon_", concat("_", h:CollectorLoopType, "_"))'>Expected CollectorLoopType to be 'air direct' or 'air indirect' or 'liquid direct' or 'liquid indirect' or 'passive thermosyphon'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorType) or contains("_single glazing black_ _single glazing selective_ _double glazing black_ _double glazing selective_ _evacuated tube_ _integrated collector storage_", concat("_", h:CollectorType, "_"))'>Expected CollectorType to be 'single glazing black' or 'single glazing selective' or 'double glazing black' or 'double glazing selective' or 'evacuated tube' or 'integrated collector storage'</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorAzimuth) or number(h:CollectorAzimuth) &gt;= 0'>Expected CollectorAzimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorAzimuth) or number(h:CollectorAzimuth) &lt; 360'>Expected CollectorAzimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorTilt) or number(h:CollectorTilt) &gt;= 0'>Expected CollectorTilt to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorTilt) or number(h:CollectorTilt) &lt;= 90'>Expected CollectorTilt to be less than or equal to 90</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorRatedOpticalEfficiency) or number(h:CollectorRatedOpticalEfficiency) &gt; 0'>Expected CollectorRatedOpticalEfficiency to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorRatedOpticalEfficiency) or number(h:CollectorRatedOpticalEfficiency) &lt; 1'>Expected CollectorRatedOpticalEfficiency to be less than 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:CollectorRatedThermalLosses) or number(h:CollectorRatedThermalLosses) &gt; 0'>Expected CollectorRatedThermalLosses to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:StorageVolume) or number(h:StorageVolume) &gt; 0'>Expected StorageVolume to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarFraction) or number(h:SolarFraction) &lt;= 1'>Expected SolarFraction to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:SolarFraction) or number(h:SolarFraction) &gt; 0'>Expected SolarFraction to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:Photovoltaics/h:PVSystem'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_roof_ _ground_ _other_", concat("_", h:Location, "_"))'>Expected Location to be 'roof' or 'ground' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:ModuleType) or contains("_standard_ _premium_ _thin film_", concat("_", h:ModuleType, "_"))'>Expected ModuleType to be 'standard' or 'premium' or 'thin film'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Tracking) or contains("_fixed_ _1-axis_ _1-axis backtracked_ _2-axis_", concat("_", h:Tracking, "_"))'>Expected Tracking to be 'fixed' or '1-axis' or '1-axis backtracked' or '2-axis'</sch:assert>
      <sch:assert role='ERROR' test='not(h:ArrayAzimuth) or number(h:ArrayAzimuth) &gt;= 0'>Expected ArrayAzimuth to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:ArrayAzimuth) or number(h:ArrayAzimuth) &lt; 360'>Expected ArrayAzimuth to be less than 360</sch:assert>
      <sch:assert role='ERROR' test='not(h:ArrayTilt) or number(h:ArrayTilt) &gt;= 0'>Expected ArrayTilt to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:ArrayTilt) or number(h:ArrayTilt) &lt;= 90'>Expected ArrayTilt to be less than or equal to 90</sch:assert>
      <sch:assert role='ERROR' test='not(h:MaxPowerOutput) or number(h:MaxPowerOutput) &gt;= 0'>Expected MaxPowerOutput to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:InverterEfficiency) or number(h:InverterEfficiency) &gt;= 0'>Expected InverterEfficiency to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:InverterEfficiency) or number(h:InverterEfficiency) &lt;= 1'>Expected InverterEfficiency to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:SystemLossesFraction) or number(h:SystemLossesFraction) &gt;= 0'>Expected SystemLossesFraction to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:SystemLossesFraction) or number(h:SystemLossesFraction) &lt;= 1'>Expected SystemLossesFraction to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:ClothesWasher'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _laundry room_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'laundry room' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:RatedAnnualkWh) or number(h:RatedAnnualkWh) &gt; 0'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:ClothesDryer'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _laundry room_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'laundry room' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FuelType) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:FuelType, "_"))'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:ControlType) or contains("_timer_ _moisture_ _temperature_", concat("_", h:ControlType, "_"))'>Expected ControlType to be 'timer' or 'moisture' or 'temperature'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:Dishwasher'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:RatedAnnualkWh) or number(h:RatedAnnualkWh) &gt; 0'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:EnergyFactor) or number(h:EnergyFactor) &lt;= 5'>Expected EnergyFactor to be less than or equal to 5</sch:assert>
      <sch:assert role='ERROR' test='not(h:EnergyFactor) or number(h:EnergyFactor) &gt; 0'>Expected EnergyFactor to be greater than 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:PlaceSettingCapacity) or number(h:PlaceSettingCapacity) &gt; 0'>Expected PlaceSettingCapacity to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:Refrigerator'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:RatedAnnualkWh) or number(h:RatedAnnualkWh) &gt; 0'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:Freezer'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:RatedAnnualkWh) or number(h:RatedAnnualkWh) &gt; 0'>Expected RatedAnnualkWh to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:Dehumidifier'>
      <sch:assert role='ERROR' test='not(h:DehumidistatSetpoint) or number(h:DehumidistatSetpoint) &gt;= 0'>Expected DehumidistatSetpoint to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:DehumidistatSetpoint) or number(h:DehumidistatSetpoint) &lt;= 1'>Expected DehumidistatSetpoint to be less than or equal to 1</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionDehumidificationLoadServed) or number(h:FractionDehumidificationLoadServed) &gt;= 0'>Expected FractionDehumidificationLoadServed to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionDehumidificationLoadServed) or number(h:FractionDehumidificationLoadServed) &lt;= 1'>Expected FractionDehumidificationLoadServed to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Appliances/h:CookingRange'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_", concat("_", h:Location, "_"))'>Expected Location to be 'basement' or 'basement - conditioned' or 'basement - unconditioned' or 'garage' or 'garage - conditioned' or 'garage - unconditioned' or 'kitchen' or 'living space' or 'other' or 'other heated space' or 'other housing unit' or 'other multifamily buffer space' or 'other non-freezing space' or 'unconditioned space'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FuelType) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:FuelType, "_"))'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Lighting/h:LightingGroup'>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_interior_ _exterior_ _garage_ _common area_", concat("_", h:Location, "_"))'>Expected Location to be 'interior' or 'exterior' or 'garage' or 'common area'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionofUnitsInLocation) or number(h:FractionofUnitsInLocation) &gt;= 0'>Expected FractionofUnitsInLocation to be greater than or equal to 0</sch:assert>
      <sch:assert role='ERROR' test='not(h:FractionofUnitsInLocation) or number(h:FractionofUnitsInLocation) &lt;= 1'>Expected FractionofUnitsInLocation to be less than or equal to 1</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Lighting/h:CeilingFan/h:Airflow'>
      <sch:assert role='ERROR' test='not(h:FanSpeed) or contains("_low_ _medium_ _high_", concat("_", h:FanSpeed, "_"))'>Expected FanSpeed to be 'low' or 'medium' or 'high'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Lighting/h:CeilingFan'>
      <sch:assert role='ERROR' test='not(h:Quantity) or number(h:Quantity) &gt; 0'>Expected Quantity to be greater than 0</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:Load'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_kWh/year_ _W_", concat("_", h:Units, "_"))'>Expected Units to be 'kWh/year' or 'W'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Pools/h:Pool/h:Heater'>
      <sch:assert role='ERROR' test='not(h:Type) or contains("_gas fired_ _electric resistance_ _heat pump_ _solar_ _other_ _unknown_ _none_", concat("_", h:Type, "_"))'>Expected Type to be 'gas fired' or 'electric resistance' or 'heat pump' or 'solar' or 'other' or 'unknown' or 'none'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:Pools/h:Pool/h:Heater/h:Load'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_kWh/year_ _therm/year_ _W_ _Btuh_", concat("_", h:Units, "_"))'>Expected Units to be 'kWh/year' or 'therm/year' or 'W' or 'Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:Load'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_kWh/year_ _W_", concat("_", h:Units, "_"))'>Expected Units to be 'kWh/year' or 'W'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:HotTubs/h:HotTub/h:Heater'>
      <sch:assert role='ERROR' test='not(h:Type) or contains("_gas fired_ _electric resistance_ _heat pump_ _solar_ _other_ _unknown_ _none_", concat("_", h:Type, "_"))'>Expected Type to be 'gas fired' or 'electric resistance' or 'heat pump' or 'solar' or 'other' or 'unknown' or 'none'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:HotTubs/h:HotTub/h:Heater/h:Load'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_kWh/year_ _therm/year_ _W_ _Btuh_", concat("_", h:Units, "_"))'>Expected Units to be 'kWh/year' or 'therm/year' or 'W' or 'Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:MiscLoads/h:PlugLoad'>
      <sch:assert role='ERROR' test='not(h:PlugLoadType) or contains("_TV plasma_ _TV CRT_ _TV other_ _computer_ _space heater_ _water bed_ _aquarium_ _electric vehicle charging_ _well pump_ _sauna_ _other_", concat("_", h:PlugLoadType, "_"))'>Expected PlugLoadType to be 'TV plasma' or 'TV CRT' or 'TV other' or 'computer' or 'space heater' or 'water bed' or 'aquarium' or 'electric vehicle charging' or 'well pump' or 'sauna' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_interior_ _exterior_", concat("_", h:Location, "_"))'>Expected Location to be 'interior' or 'exterior'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:MiscLoads/h:PlugLoad/h:Load'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_kWh/year_ _W_", concat("_", h:Units, "_"))'>Expected Units to be 'kWh/year' or 'W'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:MiscLoads/h:FuelLoad'>
      <sch:assert role='ERROR' test='not(h:FuelLoadType) or contains("_grill_ _lighting_ _fireplace_ _other_", concat("_", h:FuelLoadType, "_"))'>Expected FuelLoadType to be 'grill' or 'lighting' or 'fireplace' or 'other'</sch:assert>
      <sch:assert role='ERROR' test='not(h:Location) or contains("_interior_ _exterior_", concat("_", h:Location, "_"))'>Expected Location to be 'interior' or 'exterior'</sch:assert>
      <sch:assert role='ERROR' test='not(h:FuelType) or contains("_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_", concat("_", h:FuelType, "_"))'>Expected FuelType to be 'electricity' or 'renewable electricity' or 'natural gas' or 'renewable natural gas' or 'fuel oil' or 'fuel oil 1' or 'fuel oil 2' or 'fuel oil 4' or 'fuel oil 5/6' or 'district steam' or 'district hot water' or 'district chilled water' or 'solar hot water' or 'propane' or 'kerosene' or 'diesel' or 'coal' or 'anthracite coal' or 'bituminous coal' or 'coke' or 'wood' or 'wood pellets' or 'combination' or 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='/h:HPXML/h:Building/h:BuildingDetails/h:MiscLoads/h:FuelLoad/h:Load'>
      <sch:assert role='ERROR' test='not(h:Units) or contains("_therm/year_ _Btuh_", concat("_", h:Units, "_"))'>Expected Units to be 'therm/year' or 'Btuh'</sch:assert>
    </sch:rule>
  </sch:pattern>
</sch:schema>